name: Release

on:
  push:
    branches: [main]
    paths:
      - 'package.json' # 当 package.json 变化时触发（通常包含版本号变化）
  workflow_dispatch: # 支持手动触发
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: false
        type: string
      dry_run:
        description: 'Dry run (do not publish)'
        required: false
        type: boolean
        default: false

env:
  DEBUG: napi:*
  APP_NAME: biz-napi
  MACOSX_DEPLOYMENT_TARGET: '10.13'

permissions:
  contents: write
  id-token: write

jobs:
  # 检查版本号是否发生变化
  check-version:
    name: Check Version Change
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.version_changed }}
      current_version: ${{ steps.check.outputs.current_version }}
      should_release: ${{ steps.check.outputs.should_release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2 # 获取前两个提交以比较差异

      - name: Check version change
        id: check
        run: |
          # 获取当前版本
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # 如果是手动触发
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ inputs.version }}" != "" ]; then
              echo "version_changed=true" >> $GITHUB_OUTPUT
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "Manual release triggered for version ${{ inputs.version }}"
            else
              echo "version_changed=true" >> $GITHUB_OUTPUT
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "Manual release triggered for current version $CURRENT_VERSION"
            fi
            exit 0
          fi
          
          # 检查 package.json 中的版本是否变化
          if git diff HEAD~1 HEAD --name-only | grep -q "package.json"; then
            PREV_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version")
            if [ "$CURRENT_VERSION" != "$PREV_VERSION" ]; then
              echo "version_changed=true" >> $GITHUB_OUTPUT
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "Version changed from $PREV_VERSION to $CURRENT_VERSION"
            else
              echo "version_changed=false" >> $GITHUB_OUTPUT
              echo "should_release=false" >> $GITHUB_OUTPUT
              echo "Package.json changed but version remained the same"
            fi
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "Package.json not changed"
          fi

  # 运行完整测试套件
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: |
          npx tsc --noEmit
          cargo fmt --all -- --check
          cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Check test coverage
        run: |
          # 检查测试覆盖率是否达到要求（90%）
          COVERAGE=$(node -p "
            const fs = require('fs');
            const lcov = fs.readFileSync('./coverage/lcov.info', 'utf8');
            const lines = lcov.split('\\n');
            const linesCovered = lines.filter(l => l.startsWith('LH:')).reduce((acc, l) => acc + parseInt(l.split(':')[1]), 0);
            const linesTotal = lines.filter(l => l.startsWith('LF:')).reduce((acc, l) => acc + parseInt(l.split(':')[1]), 0);
            Math.round((linesCovered / linesTotal) * 100);
          ")
          echo "Test coverage: $COVERAGE%"
          if [ "$COVERAGE" -lt 90 ]; then
            echo "❌ Test coverage ($COVERAGE%) is below required threshold (90%)"
            exit 1
          fi
          echo "✅ Test coverage ($COVERAGE%) meets requirements"

  # 构建所有平台
  build:
    name: Build - ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    needs: [check-version, test]
    if: needs.check-version.outputs.should_release == 'true'
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: npm run build -- --target x86_64-apple-darwin
          - host: macos-latest
            target: aarch64-apple-darwin
            build: npm run build -- --target aarch64-apple-darwin
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: npm run build -- --target x86_64-pc-windows-msvc
          - host: windows-latest
            target: i686-pc-windows-msvc
            build: npm run build -- --target i686-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: npm run build -- --target x86_64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 18
          cache: npm

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies
        run: npm ci

      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: '--user 0:0 -v ${{ github.workspace }}/.cargo-cache:/root/.cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/root/.cargo/registry/index -v ${{ github.workspace }}:/build -w /build'
          run: ${{ matrix.settings.build }}

      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  # 发布到 npm
  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [check-version, test, build]
    if: needs.check-version.outputs.should_release == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: https://registry.npmjs.org/
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Move artifacts
        run: npm run artifacts

      - name: List packages
        run: ls -la npm/

      - name: Publish (Dry Run)
        if: ${{ inputs.dry_run == true }}
        run: |
          echo "🔍 Dry run mode - would publish the following packages:"
          npm run prepublishOnly
          for pkg in npm/*/; do
            echo "📦 $(basename "$pkg")"
            cd "$pkg"
            npm pack --dry-run
            cd ../..
          done

      - name: Publish to NPM
        if: ${{ inputs.dry_run != true }}
        run: |
          npm run prepublishOnly
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # 创建 GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [check-version, publish]
    if: needs.check-version.outputs.should_release == 'true' && inputs.dry_run != true
    steps:
      - uses: actions/checkout@v4

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.current_version }}
          release_name: Release v${{ needs.check-version.outputs.current_version }}
          body: |
            ## 🎉 Release v${{ needs.check-version.outputs.current_version }}
            
            ### ✅ Quality Assurance
            - All tests passed with >90% coverage
            - Code linting and formatting verified
            - Multi-platform builds successful
            
            ### 📦 Available Packages
            - macOS (x64, ARM64)
            - Windows (x64, x86)
            - Linux (x64)
            
            ### 🚀 Installation
            ```bash
            npm install @lie5860/biz-napi@${{ needs.check-version.outputs.current_version }}
            ```
            
            Auto-generated release from commit ${{ github.sha }}
          draft: false
          prerelease: false
